name: Build All Packages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_VERSION: "0.1.0"
  APP_RELEASE_NAME: "alpha1"

jobs:
  build-linux-gui:
    name: Build GUI for Linux (deb, rpm, pkg.zst, tar.xz)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate Version String
        run: echo "VERSION_STRING=${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake libgtkmm-4.0-dev rpm zstd
      - name: Configure and Build
        run: |
          mkdir build
          cd build
          cmake .. -DPROJECT_VERSION="${{ env.VERSION_STRING }}"
          cmake --build .
      - name: Create Linux Packages
        run: |
          cd build
          tar -cJf linuxisobuilder-gui-linux.tar.xz linuxisobuilder-gui
          mkdir -p deb/DEBIAN deb/usr/local/bin
          cp linuxisobuilder-gui deb/usr/local/bin/
          echo "Package: linuxisobuilder-gui" > deb/DEBIAN/control
          echo "Version: ${{ env.VERSION_STRING }}" >> deb/DEBIAN/control
          echo "Architecture: amd64 arm64" >> deb/DEBIAN/control
          echo "Maintainer: KrzysTheTech" >> deb/DEBIAN/control
          echo "Depends: libgtkmm-4.0-1v5" >> deb/DEBIAN/control
          echo "Description: GUI to build custom Linux ISOs." >> deb/DEBIAN/control
          dpkg-deb --build deb linuxisobuilder-gui.deb
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp linuxisobuilder-gui ~/rpmbuild/SOURCES/
          cat << EOF > ~/rpmbuild/SPECS/linuxisobuilder.spec
          Name:       linuxisobuilder-gui
          Version:    0.1.0
          Release:    1.alpha1
          Summary:    A GUI to build custom Linux ISOs.
          License:    UNLICENSED
          BuildArch:  x86_64 aarch64
          Requires:   gtkmm4
          %description
          A GUI tool to simplify the creation of custom Linux ISOs.
          %install
          mkdir -p %{buildroot}/usr/local/bin
          install -m 755 %{_sourcedir}/linuxisobuilder-gui %{buildroot}/usr/local/bin/linuxisobuilder-gui
          %files
          /usr/local/bin/linuxisobuilder-gui
          EOF
          rpmbuild -bb ~/rpmbuild/SPECS/linuxisobuilder.spec
          mkdir -p pkg/usr/local/bin
          cp linuxisobuilder-gui pkg/usr/local/bin/
          echo "pkgname = linuxisobuilder-gui" > pkg/.PKGINFO
          echo "pkgver = ${{ env.VERSION_STRING }}" >> pkg/.PKGINFO
          echo "arch = x86_64 aarch64" >> pkg/.PKGINFO
          echo "license = custom" >> pkg/.PKGINFO
          echo "depend = gtkmm4" >> pkg/.PKGINFO
          cd pkg
          tar -I "zstd -c -T0" -cf ../linuxisobuilder-gui.pkg.zst .
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-gui-packages
          path: |
            build/linuxisobuilder-gui.deb
            build/linuxisobuilder-gui.pkg.zst
            ~/rpmbuild/RPMS/x86_64/*.rpm
            build/linuxisobuilder-gui-linux.tar.xz

  build-linux-cli:
    name: Build CLI Binary Packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: amd64, cross_prefix: "" }
          - { arch: arm64, cross_prefix: "aarch64-linux-gnu-" }
          - { arch: i386, cross_prefix: "i686-linux-gnu-" }
          - { arch: ppc64el, cross_prefix: "powerpc64le-linux-gnu-" }
          - { arch: riscv64, cross_prefix: "riscv64-linux-gnu-" }
          - { arch: s390x, cross_prefix: "s390x-linux-gnu-" }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup QEMU for Cross-Compiling
        uses: docker/setup-qemu-action@v3
      - name: Generate Version String
        run: echo "VERSION_STRING=${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev fakeroot
          if [ "${{ matrix.cross_prefix }}" != "" ]; then
            CROSS_PREFIX_VAR="${{ matrix.cross_prefix }}"
            TOOLCHAIN_PKG_NAME="${CROSS_PREFIX_VAR%-}"
            sudo apt-get install -y gcc-$TOOLCHAIN_PKG_NAME g++-$TOOLCHAIN_PKG_NAME
          else
            sudo apt-get install -y build-essential
          fi
      - name: Compile the application
        run: |
          make CXX=${{ matrix.cross_prefix }}g++ \
               CXXFLAGS="-std=c++17 -Wall -static-libstdc++ -DPROJECT_VERSION='\"${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}\"' -DTARGET_ARCH='\"${{ matrix.arch }}\"'"
      - name: Create Binary Packages
        run: |
          mkdir -p packages
          tar -cJf packages/linuxisobuilder-cli_${{ matrix.arch }}.tar.xz build-iso README.md
          mkdir -p deb/DEBIAN deb/usr/local/bin
          cp build-iso deb/usr/local/bin/
          VERSION_STRING="${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}"
          ARCH="${{ matrix.arch }}"
          echo "Package: linuxisobuilder-cli" > deb/DEBIAN/control
          echo "Version: ${VERSION_STRING}" >> deb/DEBIAN/control
          echo "Section: utils" >> deb/DEBIAN/control
          echo "Priority: optional" >> deb/DEBIAN/control
          echo "Architecture: ${ARCH}" >> deb/DEBIAN/control
          echo "Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>" >> deb/DEBIAN/control
          echo "Description: CLI to build custom Linux ISOs." >> deb/DEBIAN/control
          fakeroot dpkg-deb --build deb packages/linuxisobuilder-cli_${ARCH}.deb
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-cli-packages-${{ matrix.arch }}
          path: packages/

  build-windows-gui:
    name: Build GUI for Windows (x64)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate Version String
        run: echo "VERSION_STRING=${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(Get-Date -Format 'yyyyMMdd')-${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with: { msystem: MINGW64, update: true, install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-gtkmm4 }
      - name: Configure and Build
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" .. -DPROJECT_VERSION="${{ env.VERSION_STRING }}"
          cmake --build .
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-gui-packages
          path: build/linuxisobuilder-gui.exe

  build-macos-gui:
    name: Build GUI for macOS (Intel & Apple Silicon)
    strategy:
      matrix:
        include:
          - os: macos-13
            name: macOS (Intel)
          - os: macos-14
            name: macOS (Apple Silicon)
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate Version String
        run: echo "VERSION_STRING=${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: brew install gtkmm4 pkg-config cmake create-dmg --formula
      - name: Configure and Build
        run: |
          mkdir build
          cd build
          cmake .. -DPROJECT_VERSION="${{ env.VERSION_STRING }}"
          cmake --build .
      - name: Create App and DMG
        run: |
          create-dmg "build/linuxisobuilder-gui.app"
          mv *.dmg "linuxisobuilder-gui-${{ matrix.name }}.dmg"
          cd build
          tar -czf "../linuxisobuilder-gui-${{ matrix.name }}.app.zip" linuxisobuilder-gui.app
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-gui-packages-${{ matrix.name }}
          path: |
            *.dmg
            *.app.zip