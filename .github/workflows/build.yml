name: Build and Package GUI v0.1.0-alpha1

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.gui.cpp'
      - 'CMakeLists.txt'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate Version String
        id: versioning
        run: echo "VERSION_STRING=0.1.0-alpha1~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake libgtkmm-4.0-dev rpm zstd
      - name: Configure and Build
        run: |
          mkdir build
          cd build
          cmake .. -DPROJECT_VERSION="${{ env.VERSION_STRING }}"
          cmake --build .
      - name: Package Artifacts
        run: |
          cd build
          # .tar.xz
          tar -cJf linuxisobuilder-gui-linux.tar.xz linuxisobuilder-gui
          # .deb
          mkdir -p deb/DEBIAN deb/usr/local/bin
          cp linuxisobuilder-gui deb/usr/local/bin/
          echo "Package: linuxisobuilder-gui" > deb/DEBIAN/control
          echo "Version: ${{ env.VERSION_STRING }}" >> deb/DEBIAN/control
          echo "Architecture: amd64" >> deb/DEBIAN/control
          echo "Maintainer: KrzysTheTech" >> deb/DEBIAN/control
          echo "Description: GUI to build custom Linux ISOs." >> deb/DEBIAN/control
          dpkg-deb --build deb linuxisobuilder-gui.deb
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            build/linuxisobuilder-gui.deb
            build/linuxisobuilder-gui-linux.tar.xz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate Version String
        id: versioning
        run: echo "VERSION_STRING=0.1.0-alpha1~$(Get-Date -Format 'yyyyMMdd')-${{ github.run_number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-gtkmm4
      - name: Configure and Build
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" .. -DPROJECT_VERSION="${{ env.VERSION_STRING }}"
          cmake --build .
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: build/linuxisobuilder-gui.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Generate Version String
        id: versioning
        run: echo "VERSION_STRING=0.1.0-alpha1~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: brew install gtkmm4 pkg-config cmake create-dmg
      - name: Configure and Build
        run: |
          mkdir build
          cd build
          cmake .. -DPROJECT_VERSION="${{ env.VERSION_STRING }}"
          cmake --build .
      - name: Create DMG Installer
        run: create-dmg "build/linuxisobuilder-gui.app" --dmg-title="Linux ISO Builder"
      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            *.dmg
            build/linuxisobuilder-gui.app
