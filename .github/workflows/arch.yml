name: Build Arch Linux Universal Netinstaller (yay-powered)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare Build Environment
        run: |
          docker run --rm --entrypoint /bin/sh -v "${{ github.workspace }}":/work archlinux:latest -c "pacman -Syu --noconfirm && pacman -S --noconfirm --needed git base-devel archiso wget"

      - name: Create ISO Profile and Configuration
        run: |
          docker run --rm --entrypoint /bin/sh -v "${{ github.workspace }}":/work -w /work archlinux:latest -c '
            # CORRECTED: Use the more stable `baseline` profile instead of `releng`
            # This fixes the "cannot stat" error and is the recommended way.
            cp -r /usr/share/archiso/configs/baseline/ archlive

            # Define minimal package list for the live ISO
            cat <<EOF > archlive/packages.x86_64
            base linux linux-firmware sudo
            grub mtools syslinux edk2-shell
            archiso calamares networkmanager
            xorg-server xorg-xinit openbox tint2
            wget git fastfetch
            EOF

            # Create all necessary Calamares config files
            mkdir -p archlive/airootfs/etc/calamares/modules
            mkdir -p archlive/airootfs/etc/calamares/scripts

            # --- settings.conf ---
            cat <<EOF > archlive/airootfs/etc/calamares/settings.conf
            modules-load:
              - welcome
              - keyboard
              - partition
              - unpackfs
              - shellprocess
              - netinstall
              - users
              - bootloader
              - displaymanager
              - finished
            branding: archlinux
            prompt-install: false
            -id: preserve-user-home-on-reinstall
            EOF

            # --- unpackfs.conf ---
            cat <<EOF > archlive/airootfs/etc/calamares/modules/unpackfs.conf
            ---
            unpack:
              - source: "/run/archiso/bootmnt/arch/x86_64/airootfs.sfs"
                sourcefs: "squashfs"
                destination: ""
            EOF

            # --- shellprocess.conf (for installing yay) ---
            cat <<EOF > archlive/airootfs/etc/calamares/modules/shellprocess.conf
            ---
            scripts:
              - script:
                  - calamares-chroot-script "/etc/calamares/scripts/install_yay.sh"
                timeout: 600
                comment: "Installing AUR Helper (yay)..."
            EOF

            # --- install_yay.sh Script ---
            cat <<'"EOF"' > archlive/airootfs/etc/calamares/scripts/install_yay.sh
            #!/bin/bash
            pacman -S --noconfirm --needed git base-devel
            useradd -m builder
            echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
            sudo -u builder bash -c "cd /home/builder && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg --noconfirm -si"
            userdel -r builder
            sed -i "/builder/d" /etc/sudoers
            EOF
            chmod +x archlive/airootfs/etc/calamares/scripts/install_yay.sh
            
            # --- netinstall.conf ---
            cat <<EOF > archlive/airootfs/etc/calamares/modules/netinstall.conf
            ---
            source: "/etc/calamares/netinstall.yaml"
            preScript: "yay -Syu --noconfirm"
            install:
                - "yay -S --noconfirm"
            EOF

            # --- netinstall.yaml (The Big Package List) ---
            cat <<'EOF' > archlive/airootfs/etc/calamares/netinstall.yaml
            packages:
                # KERNELS
              - name: "üß† Kernels"
                description: "Choose an alternative Linux kernel."
                packages: [linux-lts, linux-zen, linux-hardened]

                # DESKTOPS & WMs
              - name: "üñ•Ô∏è Desktop Environments"
                description: "Full-featured desktop environments. Choose one."
                exclusive: true
                packages:
                  - plasma-meta: "KDE Plasma"
                  - gnome: "GNOME"
                  - xfce4: "XFCE"
                  - cinnamon: "Cinnamon"
                  - mate: "MATE"
                  - budgie-desktop: "Budgie"
              - name: "ü™ü Tiling Window Managers"
                description: "Keyboard-driven, tiling window managers."
                packages: [i3-wm, sway, hyprland, bspwm, qtile, awesome, dwm]
              - name: "üí° Display Managers"
                description: "Graphical login managers."
                packages: [sddm, gdm, lightdm]

                # CORE SYSTEM & UTILITIES
              - name: "üêö Shells & Terminals"
                description: "Alternative shells and terminal emulators."
                packages: [zsh, fish, kitty, alacritty, terminator]
              - name: "üìÇ File Managers"
                description: "Graphical and terminal-based file managers."
                packages: [dolphin, thunar, nautilus, ranger, mc]
              - name: "üìà System Monitoring & Tools"
                packages: [htop, btop, conky, gparted, neofetch, fastfetch]
              - name: "üíæ Backup & Synchronization"
                packages: [timeshift, restic, borg, rsync]
              - name: "üîë Security & Privacy"
                packages: [keepassxc, veracrypt, ufw, gufw, torbrowser-launcher]
              - name: "üî† Fonts"
                description: "Useful font packages for development and general use."
                packages: [noto-fonts, ttf-fira-code, ttf-jetbrains-mono, ttf-cascadia-code, ttf-dejavu, ttf-liberation]

                # DEVELOPMENT
              - name: "üõ†Ô∏è Core Development Tools"
                packages: [base-devel, git, cmake]
              - name: "üë®‚Äçüíª Editors & IDEs"
                packages: [neovim, vim, emacs, code, geany, kate, gedit]
              - name: "üì¶ Containerization & Virtualization"
                packages: [docker, docker-compose, podman, qemu-full, virt-manager]
              - name: "üï∏Ô∏è Web Development"
                packages: [nodejs, npm, deno]
              - name: "üêç Python Development"
                packages: [python-pip, python-virtualenv]
              - name: "‚öôÔ∏è C/C++/Java/Go/Rust"
                packages: [clang, openjdk-src, go, rustup]
              - name: "üóÉÔ∏è Database Tools"
                packages: [postgresql, mariadb, redis, dbeaver]

                # APPLICATIONS
              - name: "üåê Web Browsers"
                packages:
                  - firefox
                  - chromium
                  - brave: "Brave Browser (AUR)"
              - name: "‚úçÔ∏è Office & Productivity"
                packages: [libreoffice-fresh, onlyoffice-desktopeditors, thunderbird, evolution, zotero, joplin-desktop]
              - name: "üé® Graphics & Design"
                packages: [gimp, krita, inkscape, blender, darktable, scribus, archlinux-artwork]
              - name: "üé¨ Multimedia"
                packages: [vlc, mpv, obs-studio, kdenlive, shotcut, audacity, lmms, handbrake, spotify-launcher, strawberry]
              - name: "üéÆ Gaming"
                packages: [steam, lutris, heroic-games-launcher-bin, wine, gamemode, mangohud, bottles, retroarch, dolphin-emu, 0ad, supertuxkart, xonotic, classicube]
            EOF

            # --- Other Calamares Modules ---
            mkdir -p archlive/airootfs/etc/calamares/branding/archlinux
            cat <<EOF > archlive/airootfs/etc/calamares/branding/archlinux/branding.desc
            componentName: archlinux
            welcomeText: "<h2>Welcome to the Universal Arch Linux Installer.</h2><p>This installer uses <b>yay</b> to install packages from official repositories and the AUR. An internet connection is required.</p>"
            EOF
            cat <<EOF > archlive/airootfs/etc/calamares/modules/bootloader.conf
            ---
            bootloader: "grub"
            efi_directory: "/boot"
            grub_install_args: ["--bootloader-id=arch"]
            EOF
            cat <<EOF > archlive/airootfs/etc/calamares/modules/displaymanager.conf
            ---
            displaymanagers:
              - {name: "SDDM", service: "sddm.service"}
              - {name: "GDM", service: "gdm.service"}
              - {name: "LightDM", service: "lightdm.service"}
            default: "sddm"
            EOF
            cat <<EOF > archlive/airootfs/etc/calamares/modules/partition.conf
            ---
            efiSystemPartition: "/boot"
            efiSystemPartitionSize: 512M
            create-swap: true
            swap-size: 2048M
            default-filesystem: "ext4"
            EOF
            cat <<EOF > archlive/airootfs/etc/calamares/modules/finished.conf
            ---
            reboot-now: true
            EOF
            
            # Autostart Calamares
            mkdir -p archlive/airootfs/etc/systemd/system/getty@tty1.service.d/
            cat <<EOF > archlive/airootfs/etc/systemd/system/getty@tty1.service.d/autologin.conf
            [Service]
            ExecStart=
            ExecStart=-/usr/bin/agetty --autologin root --noclear %I \$TERM
            EOF
            cat <<EOF > archlive/airootfs/root/.xinitrc
            #!/bin/sh
            openbox &
            tint2 &
            calamares --fullscreen
            EOF
            chmod +x archlive/airootfs/root/.xinitrc
            cat <<EOF > archlive/airootfs/root/.bash_profile
            [[ -z \$DISPLAY && \$XDG_VTNR -eq 1 ]] && startx
            EOF

            # Main ISO profile config
            cat <<EOF > archlive/profile.conf
            iso_name="archlinux-universal-installer"
            iso_label="ARCH_YAY_$(date +%Y%m)"
            iso_publisher="KrzysTheTech"
            iso_application="Arch Linux Universal Netinstaller"
            iso_version="$(date +%Y.%m.%d)"
            install_dir="arch"
            buildmodes=('iso')
            bootmodes=('bios.syslinux.mbr bios.syslinux.eltorito uefi-shell uefi-ia32.grub.esp uefi-x64.grub.esp')
            airootfs_image_tool_options=('-comp' 'xz' '-b' '1M')
            file_permissions=(["/etc/shadow"]="0:0:400" ["/root"]="0:0:750")
            EOF
          '

      - name: Build the ISO in a Privileged Container
        run: |
          docker run \
            --rm \
            --privileged \
            -v "${{ github.workspace }}":/work \
            -w /work \
            archlinux:latest \
            mkarchiso -v -w work -o out archlive

      - name: Set Timestamp for Artifact Name
        run: echo "TIMESTAMP=$(date +%Y.%m.%d)" >> $GITHUB_ENV

      - name: Upload ISO as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: archlinux-universal-installer-${{ env.TIMESTAMP }}-x86_64.iso
          path: out/*.iso
