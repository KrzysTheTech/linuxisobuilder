name: Build All Source and Binary Packages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_VERSION: "0.1.0"
  APP_RELEASE_NAME: "alpha1"

jobs:
  build-source-packages:
    name: Build Source Packages
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set VERSION_STRING
        run: echo "VERSION_STRING=${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          APP_RELEASE_NAME: ${{ env.APP_RELEASE_NAME }}

      - name: Install Packaging Tools
        run: sudo apt-get update && sudo apt-get install -y devscripts debhelper

      - name: Create Source Tarball
        run: |
          APP_VERSION="0.1.0"
          APP_RELEASE_NAME="alpha1"
          GITHUB_RUN_NUMBER="${GITHUB_RUN_NUMBER}"
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          UPSTREAM_VERSION="${VERSION_STRING%-*}"
          tar -cJf "linuxisobuilder_${UPSTREAM_VERSION}.orig.tar.xz" \
            --exclude=./.git \
            --transform="s,^,linuxisobuilder-${UPSTREAM_VERSION}/," \
            .

      - name: Create Debian Source Package
        working-directory: .
        run: |
          APP_VERSION="0.1.0"
          APP_RELEASE_NAME="alpha1"
          GITHUB_RUN_NUMBER="${GITHUB_RUN_NUMBER}"
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"

          mkdir -p debian
          echo "Source: linuxisobuilder" > debian/control
          echo "Section: utils" >> debian/control
          echo "Priority: optional" >> debian/control
          echo "Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>" >> debian/control
          echo "Build-Depends: debhelper-compat (= 13)" >> debian/control
          echo "" >> debian/control
          echo "Package: linuxisobuilder-cli" >> debian/control
          echo "Architecture: any" >> debian/control
          echo "Description: CLI to build custom Linux ISOs." >> debian/control

          echo "linuxisobuilder (${VERSION_STRING}) unstable; urgency=medium" > debian/changelog
          echo "" >> debian/changelog
          echo "  * New release." >> debian/changelog
          echo "" >> debian/changelog
          echo " -- KrzysTheTech <krzysztofdemirkuzniak@gmail.com>  $(date -R)" >> debian/changelog

          echo -e '#!/usr/bin/make -f\n\n%:\n\tdh $@' > debian/rules
          chmod +x debian/rules
          echo "13" > debian/compat

          debuild -S -us -uc

      - name: Create Arch Linux Source Package (PKGBUILD)
        run: |
          APP_VERSION="0.1.0"
          APP_RELEASE_NAME="alpha1"
          cat << EOF > PKGBUILD
# Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>
pkgname=linuxisobuilder-cli
pkgver=${APP_VERSION}_${APP_RELEASE_NAME}
pkgrel=1
pkgdesc="A CLI to build custom Linux ISOs."
arch=('i686' 'x86_64' 'aarch64' 'ppc64le' 'riscv64')
license=('custom')
source=("\${pkgname}-\${pkgver}.tar.gz::https://github.com/KrzysTheTech/linuxisobuilder/archive/main.tar.gz")
sha256sums=('SKIP')
build() {
  cd "\${srcdir}/linuxisobuilder-main"
  make
}
package() {
  cd "\${srcdir}/linuxisobuilder-main"
  install -Dm755 build-iso "\${pkgdir}/usr/local/bin/build-iso"
}
EOF
          tar -czf arch-source.tar.gz PKGBUILD

      - name: Upload Source Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-packages
          path: |
            *.dsc
            *.orig.tar.xz
            *.debian.tar.xz
            arch-source.tar.gz

  build-binary-packages:
    name: Build Binary for ${{ matrix.arch }}
    needs: build-source-packages
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: amd64, cross_prefix: "" }
          - { arch: arm64, cross_prefix: "aarch64-linux-gnu-" }
          - { arch: i386, cross_prefix: "i686-linux-gnu-" }
          - { arch: ppc64el, cross_prefix: "powerpc64le-linux-gnu-" }
          - { arch: riscv64, cross_prefix: "riscv64-linux-gnu-" }
          - { arch: s390x, cross_prefix: "s390x-linux-gnu-" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set VERSION_STRING
        run: echo "VERSION_STRING=${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          APP_RELEASE_NAME: ${{ env.APP_RELEASE_NAME }}

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev rpm zstd fakeroot
          if [ "${{ matrix.cross_prefix }}" != "" ]; then
            CROSS_PREFIX_VAR="${{ matrix.cross_prefix }}"
            TOOLCHAIN_PKG_NAME="${CROSS_PREFIX_VAR%-}"
            sudo apt-get install -y gcc-$TOOLCHAIN_PKG_NAME g++-$TOOLCHAIN_PKG_NAME
          else
            sudo apt-get install -y build-essential
          fi

      - name: Compile the application
        run: |
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          make CXX=${{ matrix.cross_prefix }}g++ \
               CXXFLAGS="-std=c++11 -Wall -static-libstdc++ -DPROJECT_VERSION='\"$VERSION_STRING\"' -DTARGET_ARCH='\"${{ matrix.arch }}\"'"

      - name: Create Binary Packages
        run: |
          mkdir -p packages
          tar -cJf packages/linuxisobuilder-cli_${{ matrix.arch }}.tar.xz build-iso

      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-packages-${{ matrix.arch }}
          path: packages/