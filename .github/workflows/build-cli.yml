name: Build and Publish Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_VERSION: "0.1.0"
  APP_RELEASE_NAME: "alpha1"
  RELEASE_TAG: "v0.1.0-alpha1-cli-fixed"

jobs:
  build-binary-packages:
    name: Build Binary for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: amd64, cross_prefix: "" }
          - { arch: arm64, cross_prefix: "aarch64-linux-gnu-" }
          - { arch: i386, cross_prefix: "i686-linux-gnu-" }
          - { arch: ppc64el, cross_prefix: "powerpc64le-linux-gnu-" }
          - { arch: riscv64, cross_prefix: "riscv64-linux-gnu-" }
          - { arch: s390x, cross_prefix: "s390x-linux-gnu-" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup QEMU for Cross-Compiling
        uses: docker/setup-qemu-action@v3

      - name: Generate Version String
        run: echo "VERSION_STRING=${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev fakeroot
          if [ "${{ matrix.cross_prefix }}" != "" ]; then
            CROSS_PREFIX_VAR="${{ matrix.cross_prefix }}"
            TOOLCHAIN_PKG_NAME="${CROSS_PREFIX_VAR%-}"
            sudo apt-get install -y gcc-$TOOLCHAIN_PKG_NAME g++-$TOOLCHAIN_PKG_NAME
          else
            sudo apt-get install -y build-essential
          fi

      - name: Compile the application
        run: |
          make CXX=${{ matrix.cross_prefix }}g++ \
               CXXFLAGS="-std=c++17 -Wall -static-libstdc++ -DPROJECT_VERSION='\"${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}\"' -DTARGET_ARCH='\"${{ matrix.arch }}\"'"

      - name: Create Binary Packages
        run: |
          mkdir -p packages

          # Create .tar.xz archive
          tar -cJf packages/linuxisobuilder-cli_${{ matrix.arch }}.tar.xz build-iso README.md

          # Create .deb Binary with safe tee method
          mkdir -p deb/DEBIAN deb/usr/local/bin
          cp build-iso deb/usr/local/bin/

          VERSION_STRING="${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}"
          ARCH="${{ matrix.arch }}"

          echo "Generating control file for ${ARCH}..."

          echo "Package: linuxisobuilder-cli" > deb/DEBIAN/control
          echo "Version: ${VERSION_STRING}" >> deb/DEBIAN/control
          echo "Section: utils" >> deb/DEBIAN/control
          echo "Priority: optional" >> deb/DEBIAN/control
          echo "Architecture: ${ARCH}" >> deb/DEBIAN/control
          echo "Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>" >> deb/DEBIAN/control
          echo "Description: CLI to build custom Linux ISOs." >> deb/DEBIAN/control

          fakeroot dpkg-deb --build deb packages/linuxisobuilder-cli_${ARCH}.deb

      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-packages-${{ matrix.arch }}
          path: packages/

  publish-release:
    name: Publish GitHub Release
    needs: [build-binary-packages]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Ensure tag exists or create one
        run: |
          TAG="${{ env.RELEASE_TAG }}"
          if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
            echo "Creating tag $TAG"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag "$TAG"
            git push origin "$TAG"
          else
            echo "Tag $TAG already exists."
          fi

      publish-release:
    name: Publish GitHub Release
    needs: [build-binary-packages]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important: fetch all tags and history

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Ensure tag exists or create one
        run: |
          TAG="${{ env.RELEASE_TAG }}"
          if ! git tag | grep -q "^${TAG}$"; then
            echo "Creating tag $TAG"
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git tag "$TAG"
            git push origin "$TAG"
          else
            echo "Tag $TAG already exists."
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Version ${{ env.RELEASE_TAG }}
          prerelease: true
          body: |
            ## üõ†Ô∏è linuxisobuilder-cli - Fixed `.deb` Packaging

            This release fixes an important issue with the `.deb` package where the `Section:` field was missing, preventing proper use with Debian repositories (`reprepro`).

            ### ‚úÖ What‚Äôs Fixed
            - Added `Section: utils` and `Priority: optional` to `.deb` control files.
            - Verified to work with `reprepro`-based APT repositories.
            - No functional changes to the CLI binary.

            ### üì¶ Includes
            - `.deb` and `.tar.xz` packages for:
              * amd64
              * arm64
              * i386
              * riscv64
              * ppc64el
              * s390x

            ---
            Tag: `${{ env.RELEASE_TAG }}`
          files: artifacts/*/*
