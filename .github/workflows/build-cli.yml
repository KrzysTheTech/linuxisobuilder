name: Build Source and Binary Packages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  APP_VERSION: "0.1.0"
  APP_RELEASE_NAME: "alpha1"

jobs:
  build-source-tarball:
    name: Build Source Tarball
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repo_source

      - name: Set VERSION_STRING
        run: echo "VERSION_STRING=${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          APP_RELEASE_NAME: ${{ env.APP_RELEASE_NAME }}

      - name: Create Source Tarball
        run: |
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          UPSTREAM_VERSION="${VERSION_STRING%-*}"
          tar -cJf "linuxisobuilder_${UPSTREAM_VERSION}.orig.tar.xz" \
            --exclude=./repo_source/.git \
            --transform="s,^repo_source,linuxisobuilder-${UPSTREAM_VERSION}," \
            ./repo_source

      - name: Upload Source Tarball
        uses: actions/upload-artifact@v4
        with:
          name: source-tarball
          path: linuxisobuilder_*.orig.tar.xz

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: build-source-tarball
    strategy:
      matrix:
        arch: [amd64, arm64, ppc64el, i386, riscv64, s390x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set VERSION_STRING
        run: echo "VERSION_STRING=${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          APP_RELEASE_NAME: ${{ env.APP_RELEASE_NAME }}

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential devscripts debhelper fakeroot zstd gcc g++ make rpm base-devel

      - name: Set up architecture variables
        run: |
          case "${{ matrix.arch }}" in
            amd64) echo "CROSS_PREFIX=" >> $GITHUB_ENV && echo "DEB_ARCH=amd64" >> $GITHUB_ENV && echo "RPM_ARCH=x86_64" >> $GITHUB_ENV && echo "PKG_ARCH=x86_64" >> $GITHUB_ENV ;;
            arm64) echo "CROSS_PREFIX=aarch64-linux-gnu-" >> $GITHUB_ENV && echo "DEB_ARCH=arm64" >> $GITHUB_ENV && echo "RPM_ARCH=aarch64" >> $GITHUB_ENV && echo "PKG_ARCH=aarch64" >> $GITHUB_ENV ;;
            ppc64el) echo "CROSS_PREFIX=powerpc64le-linux-gnu-" >> $GITHUB_ENV && echo "DEB_ARCH=ppc64el" >> $GITHUB_ENV && echo "RPM_ARCH=ppc64le" >> $GITHUB_ENV && echo "PKG_ARCH=ppc64le" >> $GITHUB_ENV ;;
            i386) echo "CROSS_PREFIX=i686-linux-gnu-" >> $GITHUB_ENV && echo "DEB_ARCH=i386" >> $GITHUB_ENV && echo "RPM_ARCH=i686" >> $GITHUB_ENV && echo "PKG_ARCH=i686" >> $GITHUB_ENV ;;
            riscv64) echo "CROSS_PREFIX=riscv64-linux-gnu-" >> $GITHUB_ENV && echo "DEB_ARCH=riscv64" >> $GITHUB_ENV && echo "RPM_ARCH=riscv64" >> $GITHUB_ENV && echo "PKG_ARCH=riscv64" >> $GITHUB_ENV ;;
            s390x) echo "CROSS_PREFIX=s390x-linux-gnu-" >> $GITHUB_ENV && echo "DEB_ARCH=s390x" >> $GITHUB_ENV && echo "RPM_ARCH=s390x" >> $GITHUB_ENV && echo "PKG_ARCH=s390x" >> $GITHUB_ENV ;;
          esac

      - name: Install Cross Toolchain (if needed)
        run: |
          if [ -n "${{ env.CROSS_PREFIX }}" ]; then
            TOOLCHAIN="${{ env.CROSS_PREFIX%-linux-gnu- }}"
            sudo apt-get install -y gcc-$TOOLCHAIN g++-$TOOLCHAIN
          fi

      - name: Compile Application
        run: |
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          make CXX="${{ env.CROSS_PREFIX }}g++" \
               CXXFLAGS="-std=c++11 -Wall -static-libstdc++ -DPROJECT_VERSION=\"$VERSION_STRING\" -DTARGET_ARCH=\"${{ matrix.arch }}\""

      - name: Create Binary Tar.xz
        run: |
          mkdir -p out
          cp build-iso out/
          tar -cJf linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ matrix.arch }}.tar.xz -C out build-iso

      - name: Create Binary DEB Package
        run: |
          mkdir -p debpkg/DEBIAN
          mkdir -p debpkg/usr/local/bin
          cp build-iso debpkg/usr/local/bin/
          cat <<EOF > debpkg/DEBIAN/control
Package: linuxisobuilder-cli
Version: ${APP_VERSION}-${APP_RELEASE_NAME}
Architecture: ${{ env.DEB_ARCH }}
Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>
Description: CLI tool for building custom Linux ISOs
EOF
          dpkg-deb --build debpkg linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ env.DEB_ARCH }}.deb

      - name: Create Binary RPM Package
        run: |
          mkdir -p rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp build-iso rpmbuild/
          cat <<EOF > rpmbuild/SPECS/linuxisobuilder-cli.spec
Name: linuxisobuilder-cli
Version: ${APP_VERSION}
Release: 1.${APP_RELEASE_NAME}.${GITHUB_RUN_NUMBER}
Summary: CLI tool for building Linux ISOs
License: Custom
Group: Development/Tools
BuildArch: ${{ env.RPM_ARCH }}
%description
CLI tool for building Linux ISOs
%prep
%build
%install
mkdir -p %{buildroot}/usr/local/bin
install -m 755 rpmbuild/build-iso %{buildroot}/usr/local/bin/build-iso
%files
/usr/local/bin/build-iso
EOF
          rpmbuild --define "_topdir $(pwd)/rpmbuild" -bb rpmbuild/SPECS/linuxisobuilder-cli.spec

      - name: Create Binary PKG.ZST Package
        run: |
          mkdir -p pkgbuild/usr/local/bin
          cp build-iso pkgbuild/usr/local/bin/
          tar -cf - -C pkgbuild . | zstd -19 -T0 -o linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ env.PKG_ARCH }}.pkg.tar.zst

      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.arch }}
          path: |
            linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ matrix.arch }}.tar.xz
            linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ env.DEB_ARCH }}.deb
            rpmbuild/RPMS/${{ env.RPM_ARCH }}/linuxisobuilder-cli*.rpm
            linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ env.PKG_ARCH }}.pkg.tar.zst
