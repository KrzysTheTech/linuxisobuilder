name: Build Source and Binary Packages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_VERSION: "0.1.0"
  APP_RELEASE_NAME: "alpha1"

jobs:
  build-source-tarball:
    name: Build Source Tarball
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: repo_source

      - name: Set VERSION_STRING
        run: echo "VERSION_STRING=${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          APP_RELEASE_NAME: ${{ env.APP_RELEASE_NAME }}

      - name: Create Source Tarball
        run: |
          APP_VERSION="0.1.0"
          APP_RELEASE_NAME="alpha1"
          GITHUB_RUN_NUMBER="${GITHUB_RUN_NUMBER}"
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          UPSTREAM_VERSION="${VERSION_STRING%-*}"
          tar -cJf "linuxisobuilder_${UPSTREAM_VERSION}.orig.tar.xz" \
            --exclude=./repo_source/.git \
            --transform="s,^repo_source,linuxisobuilder-${UPSTREAM_VERSION}," \
            ./repo_source

      - name: Upload Source Tarball
        uses: actions/upload-artifact@v4
        with:
          name: source-tarball
          path: linuxisobuilder_*.orig.tar.xz

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: build-source-tarball
    strategy:
      matrix:
        arch: [amd64, arm64, ppc64el, i386, riscv64, s390x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set VERSION_STRING
        run: echo "VERSION_STRING=${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        env:
          APP_VERSION: ${{ env.APP_VERSION }}
          APP_RELEASE_NAME: ${{ env.APP_RELEASE_NAME }}

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential devscripts debhelper rpm fakeroot rpm-build zstd gcc g++ make

      - name: Determine CROSS_PREFIX and RPM_ARCH
        run: |
          case "${{ matrix.arch }}" in
            amd64) 
              echo "CROSS_PREFIX=" >> $GITHUB_ENV
              echo "RPM_ARCH=x86_64" >> $GITHUB_ENV
              ;;
            arm64) 
              echo "CROSS_PREFIX=aarch64-linux-gnu-" >> $GITHUB_ENV
              echo "RPM_ARCH=aarch64" >> $GITHUB_ENV
              ;;
            ppc64el) 
              echo "CROSS_PREFIX=powerpc64le-linux-gnu-" >> $GITHUB_ENV
              echo "RPM_ARCH=ppc64le" >> $GITHUB_ENV
              ;;
            i386) 
              echo "CROSS_PREFIX=i686-linux-gnu-" >> $GITHUB_ENV
              echo "RPM_ARCH=i686" >> $GITHUB_ENV
              ;;
            riscv64) 
              echo "CROSS_PREFIX=riscv64-linux-gnu-" >> $GITHUB_ENV
              echo "RPM_ARCH=riscv64" >> $GITHUB_ENV
              ;;
            s390x) 
              echo "CROSS_PREFIX=s390x-linux-gnu-" >> $GITHUB_ENV
              echo "RPM_ARCH=s390x" >> $GITHUB_ENV
              ;;
            *) 
              echo "CROSS_PREFIX=" >> $GITHUB_ENV
              echo "RPM_ARCH=x86_64" >> $GITHUB_ENV
              ;;
          esac

      - name: Install Cross Compiler (if needed)
        run: |
          if [ -n "${{ env.CROSS_PREFIX }}" ]; then
            TOOLCHAIN_PKG="${{ env.CROSS_PREFIX%-linux-gnu- }}"
            sudo apt-get install -y gcc-$TOOLCHAIN_PKG g++-$TOOLCHAIN_PKG
          else
            sudo apt-get install -y gcc g++
          fi

      - name: Compile Application
        run: |
          VERSION_STRING="${APP_VERSION}-${APP_RELEASE_NAME}~$(date +%Y%m%d)-${GITHUB_RUN_NUMBER}"
          make CXX="${{ env.CROSS_PREFIX }}g++" \
               CXXFLAGS="-std=c++11 -Wall -static-libstdc++ -DPROJECT_VERSION='\"$VERSION_STRING\"' -DTARGET_ARCH='\"${{ matrix.arch }}\"'"

      - name: Prepare Debian Packaging Files
        run: |
          mkdir -p debian
          echo "Source: linuxisobuilder" > debian/control
          echo "Section: utils" >> debian/control
          echo "Priority: optional" >> debian/control
          echo "Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>" >> debian/control
          echo "Build-Depends: debhelper-compat (= 13)" >> debian/control
          echo "" >> debian/control
          echo "Package: linuxisobuilder-cli" >> debian/control
          echo "Architecture: any" >> debian/control
          echo "Description: CLI to build custom Linux ISOs." >> debian/control

          echo "linuxisobuilder (${APP_VERSION}-${APP_RELEASE_NAME}) unstable; urgency=medium" > debian/changelog
          echo "" >> debian/changelog
          echo "  * New release." >> debian/changelog
          echo "" >> debian/changelog
          echo " -- KrzysTheTech <krzysztofdemirkuzniak@gmail.com>  $(date -R)" >> debian/changelog

          echo -e '#!/usr/bin/make -f\n\n%:\n\tdh $@' > debian/rules
          chmod +x debian/rules
          echo "13" > debian/compat

      - name: Build Debian Binary Package
        run: dpkg-deb --build . linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ matrix.arch }}.deb

      - name: Prepare RPM Build Environment
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp linuxisobuilder_${APP_VERSION}-${APP_RELEASE_NAME}.orig.tar.xz ~/rpmbuild/SOURCES/ || true

      - name: Create RPM Spec File
        run: |
          cat << EOF > ~/rpmbuild/SPECS/linuxisobuilder-cli.spec
Name:       linuxisobuilder-cli
Version:    ${APP_VERSION}
Release:    1%{?dist}
Summary:    A CLI to build custom Linux ISOs.
License:    UNLICENSED
Source0:    linuxisobuilder_${APP_VERSION}-${APP_RELEASE_NAME}.orig.tar.xz
%description
A command-line tool to simplify the creation of custom Linux ISOs.
%prep
%setup -q
%build
make
%install
mkdir -p %{buildroot}/usr/local/bin
install -m 755 build-iso %{buildroot}/usr/local/bin/build-iso
%files
/usr/local/bin/build-iso
EOF

      - name: Build RPM Binary Package
        run: rpmbuild -bb ~/rpmbuild/SPECS/linuxisobuilder-cli.spec

      - name: Create Arch Linux PKGBUILD and Build
        run: |
          cat << EOF > PKGBUILD
# Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>
pkgname=linuxisobuilder-cli
pkgver=${APP_VERSION}-${APP_RELEASE_NAME}
pkgrel=1
pkgdesc="A CLI to build custom Linux ISOs."
arch=('i686' 'x86_64' 'aarch64' 'ppc64le' 'riscv64' 's390x')
license=('custom')
source=("https://github.com/KrzysTheTech/linuxisobuilder/archive/main.tar.gz")
sha256sums=('SKIP')
build() {
  cd "\${srcdir}/linuxisobuilder-main"
  make
}
package() {
  cd "\${srcdir}/linuxisobuilder-main"
  install -Dm755 build-iso "\${pkgdir}/usr/local/bin/build-iso"
}
EOF
          makepkg --skipinteg --noconfirm --packagetype pkg.tar.zst

      - name: Create binary tar.xz archive
        run: |
          mkdir -p binary-tar
          cp build-iso binary-tar/
          tar -cJf linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ matrix.arch }}.tar.xz -C binary-tar .

      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.arch }}
          path: |
            linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ matrix.arch }}.deb
            ~/rpmbuild/RPMS/${{ env.RPM_ARCH }}/linuxisobuilder-cli-${APP_VERSION}-1*.rpm
            *.pkg.tar.zst
            linuxisobuilder-cli_${APP_VERSION}-${APP_RELEASE_NAME}_${{ matrix.arch }}.tar.xz