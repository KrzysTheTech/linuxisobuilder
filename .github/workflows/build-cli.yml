name: Build and Publish Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  APP_VERSION: "0.1.0"
  APP_RELEASE_NAME: "alpha1"
  RELEASE_TAG: "0.1.0-alpha1"

jobs:
  build-binary-packages:
    name: Build Binary for ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: amd64, rpm_arch: x86_64, cross_prefix: "" }
          - { arch: arm64, rpm_arch: aarch64, cross_prefix: "aarch64-linux-gnu-" }
          - { arch: i386, rpm_arch: i686, cross_prefix: "i686-linux-gnu-" }
          - { arch: ppc64el, rpm_arch: ppc64le, cross_prefix: "powerpc64le-linux-gnu-" }
          - { arch: riscv64, rpm_arch: riscv64, cross_prefix: "riscv64-linux-gnu-" }
          - { arch: s390x, rpm_arch: s390x, cross_prefix: "s390x-linux-gnu-" }

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup QEMU for Cross-Compiling
        uses: docker/setup-qemu-action@v3
      - name: Generate Version String
        run: echo "VERSION_STRING=${{ env.APP_VERSION }}-${{ env.APP_RELEASE_NAME }}~$(date +%Y%m%d)-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev rpm zstd fakeroot
          if [ "${{ matrix.cross_prefix }}" != "" ]; then
            CROSS_PREFIX_VAR="${{ matrix.cross_prefix }}"
            TOOLCHAIN_PKG_NAME="${CROSS_PREFIX_VAR%-}"
            sudo apt-get install -y gcc-$TOOLCHAIN_PKG_NAME g++-$TOOLCHAIN_PKG_NAME
          else
            sudo apt-get install -y build-essential
          fi
      - name: Compile the application
        run: |
          make CXX=${{ matrix.cross_prefix }}g++ \
               CXXFLAGS="-std=c++17 -Wall -static-libstdc++ -DPROJECT_VERSION='\"${{ env.VERSION_STRING }}\"' -DTARGET_ARCH='\"${{ matrix.arch }}\"'"
      - name: Create Binary Packages
        run: |
          mkdir -p packages
          tar -cJf packages/linuxisobuilder-cli_${{ matrix.arch }}.tar.xz build-iso README.md
          
          # .deb Binary
          mkdir -p deb/DEBIAN deb/usr/local/bin
          cp build-iso deb/usr/local/bin/
          echo "Package: linuxisobuilder-cli" > deb/DEBIAN/control
          echo "Version: ${{ env.VERSION_STRING }}" >> deb/DEBIAN/control
          echo "Architecture: ${{ matrix.arch }}" >> deb/DEBIAN/control
          echo "Maintainer: KrzysTheTech <krzysztofdemirkuzniak@gmail.com>" >> deb/DEBIAN/control
          echo "Description: CLI to build custom Linux ISOs." >> deb/DEBIAN/control
          fakeroot dpkg-deb --build deb packages/linuxisobuilder-cli_${{ matrix.arch }}.deb
          
          # .rpm Binary
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS}
          cp build-iso ~/rpmbuild/SOURCES/
          cat << EOF > ~/rpmbuild/SPECS/linuxisobuilder-cli.spec
          Name:       linuxisobuilder-cli
          Version:    ${{ env.APP_VERSION }}
          Release:    1.${{ env.APP_RELEASE_NAME }}.${{ github.run_number }}
          Summary:    A CLI to build custom Linux ISOs.
          License:    UNLICENSED
          BuildArch:  ${{ matrix.rpm_arch }}
          %description
          A command-line tool to simplify the creation of custom Linux ISOs.
          %install
          mkdir -p %{buildroot}/usr/local/bin
          install -m 755 %{_sourcedir}/build-iso %{buildroot}/usr/local/bin/build-iso
          %files
          /usr/local/bin/build-iso
          EOF
          rpmbuild -bb --target ${{ matrix.rpm_arch }} ~/rpmbuild/SPECS/linuxisobuilder-cli.spec
          cp ~/rpmbuild/RPMS/${{ matrix.rpm_arch }}/*.rpm packages/
      - name: Upload Binary Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-packages-${{ matrix.arch }}
          path: packages/

  publish-release:
    name: Publish GitHub Release
    needs: [build-binary-packages]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Version ${{ env.RELEASE_TAG }}
          prerelease: true
          body: |
            ## Version 0.1.0-alpha1
            This is the first alpha release of the new 0.1.0 series.

            ### âœ¨ Features
            * **Cross-Compilation:** The CLI tool is now cross-compiled for multiple architectures: `amd64`, `arm64`, `i386`, `ppc64el`, `riscv64`, `s390x`.
            * **Dynamic Versioning:** The build system now embeds a detailed version string and architecture into the application, viewable with the `--version` flag.

            ### ðŸ“¦ Build System
            * **Automated Packaging:** The workflow automatically generates `.deb`, `.rpm`, and `.tar.xz` packages for each architecture.
          files: artifacts/*/*
